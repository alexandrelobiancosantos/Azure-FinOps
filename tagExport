import os
import sys
import argparse
import pandas as pd
from azure.identity import AzureCliCredential
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.subscription import SubscriptionClient
from utils import setup_logging, get_subscription_ids, get_access_token
setup_logging()
def main(subscription_prefix, save_xlsx):
    # Obter IDs das assinaturas que começam com o prefixo fornecido
    subscriptions = get_subscription_ids(subscription_prefix)
    credential = AzureCliCredential()
    for subscription_name, subscription_id in subscriptions:
        # Inicializa o cliente de gerenciamento de recursos com a ID da assinatura obtida
        resource_client = ResourceManagementClient(credential, subscription_id)
        # Listar todos os recursos na assinatura
        resources = resource_client.resources.list()
        # Carregar a tabela de recursos tageáveis fornecida pela Azure
        taggable_resources_df = pd.read_csv('tag-support.csv')
        # Lista para armazenar os dados de tags
        data = []
        # Coletar tags de cada recurso e armazenar os dados
        for resource in resources:
            resource_id = resource.id
            resource_tags = resource.tags if resource.tags else {}
            resource_name = resource.name
            service_name = resource.type.split('/')[1]  # Obtendo o nome do serviço a partir do tipo do recurso
            resource_type = resource.type
            # Verificar se o resourceType está na tabela de recursos tageáveis
            supports_tags = taggable_resources_df[
                (taggable_resources_df['providerName'] == resource_type.split('/')[0]) &
                (taggable_resources_df['resourceType'] == resource_type.split('/')[1])
            ]['supportsTags'].values
            supports_tags = supports_tags[0] if len(supports_tags) > 0 else 'Unknown'
            # Cria um dicionário para armazenar os dados de cada recurso
            resource_data = {
                "Subscription": subscription_name,
                "SubscriptionID": subscription_id,  # Adiciona o ID da assinatura
                "ResourceName": resource_name,
                "ResourceID": resource_id,  # Adiciona o ID do recurso
                "ServiceName": service_name,
                "resourceType": resource_type,
                "supportsTags": supports_tags
            }
            # Adiciona as tags ao dicionário
            for tag_key, tag_value in resource_tags.items():
                resource_data[tag_key] = tag_value
            # Adiciona o dicionário à lista de dados
            data.append(resource_data)
        # Criar DataFrame a partir dos dados coletados
        df = pd.DataFrame(data)
        # Exibir a tabela completa de tags e valores
        print(f"Tabela de todas as tags e valores para a assinatura {subscription_name}:")
        print(df)
        # Caminho para salvar o arquivo CSV no diretório atual
        csv_path = os.path.join(os.getcwd(), f"{subscription_name}_resource_tags_expanded.csv")
        xlsx_path = os.path.join(os.getcwd(), f"{subscription_name}_resource_tags_expanded.xlsx")
        df.to_csv(csv_path, index=False)
        # Salvar a tabela em um arquivo Excel se o parâmetro --xlsx for fornecido
        if save_xlsx:
            df.to_excel(xlsx_path, index=False, engine='xlsxwriter')
# Configuração de argumentos da linha de comando
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Lista as tags dos recursos das assinaturas que começam com o prefixo especificado e salva em arquivos CSV e Excel opcionalmente.")
    parser.add_argument("subscription_prefix", type=str, help="Prefixo do nome das assinaturas do Azure.")
    parser.add_argument("--xlsx", action="store_true", help="Salva a saída em um arquivo Excel.")
    args = parser.parse_args()
    main(args.subscription_prefix, args.xlsx)
